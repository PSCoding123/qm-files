git --version

specify settings with git config

username: git config --global user.name "name"
email adresse: git config --global user.email "youremail@adress.com"
text editor:  git config --global core.editor notepad

-contribute to a git project:
git fork "adresse" : copy an exisisting project to your pc - your own personal copy
git clone "adresse" : clone an exisiting project to your pc - changes made by contributers will be pushed to the shared project
git status: shows changed files
git add . : add all files that have been changed (alternative git add -A)
git add <filename>: only adds the specified file
git commit -m "text": commit from the staging area to the repo usually requires a message
git commit -a --allow-empty-message -m '' : possible to set to empty message, but not recommended
git checkout <file>: restore a file
git checkout <branch>: switch to another branch
git pull <remote> <branch> : pull remote changes to local
git push <remote> <branch> : publish local changes on a remote

- create a repo on your computer:
make folder -> cd into it
copy files into folder
git init
git status: tells you the changes that have been made
git add "filename"
git restore --staged <file> : to unstage files
git commit -> file is now saved: test with delete and then
git checkout -- . (everything is now back to the way it was)

git remote -v: shows you the server adress of where it thinks you want to pull/push to
git remote set-url origin "adresse" : sets the path to where git is supposed to pull/push the files


git add -i : interactivtly select files
	-> choose 4 (untracked)
	-> choose the files you want to select by number
	-> press empty
	-> quit
git commit -m "text"


- merge projects:
git clone "eigenes projekt"
cd into it
git remote add changes "anderes projekt"
git fetch changes
git merge changes/<branch> (f.e. main oder Master)
git push: from local to remote
git push origin <branch> : main, master whatever 


